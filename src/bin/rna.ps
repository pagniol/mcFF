%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.5.1
%%CreationDate: Wed Oct 16 13:02:11 2024
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
GCGGAUUUA2CUCAGHHGGGAGAGCMCCAGAOUOAAYAP5UGGAG7UC5UGUG5PCG1UCCACAGAAUUCGCACCAMMMMMMMMM\
) } def
/len { sequence length } bind def

/coor [
[153.80326843 208.83111572]
[146.94464111 195.49098206]
[140.08599854 182.15084839]
[133.22737122 168.81072998]
[126.36872864 155.47059631]
[119.51009369 142.13046265]
[112.65145874 128.79032898]
[105.79282379 115.45019531]
[100.14900208 122.87970734]
[90.08541107 127.52896881]
[77.09783936 127.30706787]
[63.08760071 132.66552734]
[49.07735825 138.02400208]
[42.86124802 152.55450439]
[28.16030502 158.35603333]
[13.69633389 151.98664856]
[8.05055332 137.22518921]
[14.57250500 122.82936096]
[29.39283180 117.33996582]
[43.71889496 124.01375580]
[57.72913742 118.65529633]
[71.73937988 113.29682922]
[74.03092957 106.15548706]
[59.74831772 101.57215881]
[64.33187103 87.28961182]
[78.61404419 91.87280273]
[80.90560150 84.73146057]
[72.62908173 72.22148895]
[64.35256958 59.71152496]
[49.13187790 61.32063675]
[34.91112137 55.66125488]
[24.95811844 44.03385925]
[21.55999756 29.11034203]
[25.49762344 14.32001877]
[35.86615753 3.06159592]
[50.28298569 -2.07782269]
[65.43522644 0.08276409]
[77.84101105 9.04686928]
[84.64957428 22.75460625]
[84.29635620 38.05603790]
[76.86253357 51.43500900]
[85.13905334 63.94497681]
[93.41556549 76.45494080]
[87.36784363 62.72814178]
[92.08609009 48.48952866]
[105.13426208 41.09052658]
[119.77555847 44.35125732]
[128.45065308 56.58820343]
[126.68056488 71.48339844]
[115.37727356 81.34712219]
[128.18116760 73.53302002]
[140.98506165 65.71891022]
[153.78895569 57.90480804]
[155.94953918 42.41720200]
[167.59443665 31.98023605]
[183.22531128 31.52193069]
[195.46171570 41.25867844]
[198.52601624 56.59308624]
[190.97132874 70.28472137]
[176.36476135 75.86879730]
[161.60307312 70.70870209]
[148.79917908 78.52280426]
[135.99526978 86.33691406]
[123.19137573 94.15101624]
[119.13295746 108.59156036]
[125.99159241 121.93169403]
[132.85023499 135.27182007]
[139.70886230 148.61195374]
[146.56750488 161.95208740]
[153.42613220 175.29222107]
[160.28477478 188.63235474]
[167.14340210 201.97248840]
[182.29010010 200.68960571]
[196.77325439 205.30554199]
[208.38427734 215.11639404]
[215.35255432 228.62606812]
[216.61550903 243.77445984]
[211.98052979 258.25152588]
[202.15440369 269.84960938]
[188.63557434 276.80014038]
[173.48554993 278.04315186]
[159.01460266 273.38912964]
[147.42942810 263.54776001]
[140.49670410 250.01979065]
[139.27362061 234.86814880]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[1 72]
[2 71]
[3 70]
[4 69]
[5 68]
[6 67]
[7 66]
[8 65]
[11 22]
[12 21]
[13 20]
[27 43]
[28 42]
[29 41]
[50 64]
[51 63]
[52 62]
[53 61]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
